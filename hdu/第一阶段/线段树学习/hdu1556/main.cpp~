#include <iostream>
#include <string.h>
#define MAXN 100005
#define ll long long 
using namespace std;

int n, tree[MAXN<<2], lazy[MAXN<<2], arr[MAXN];

void init() {
	memset(tree, false, sizeof(arr));
	memset(arr, false, sizeof(arr));
	memset(lazy, false, sizeof(lazy));
}

void push_down(int x) {
	if(lazy[x]) {
		lazy[x<<1] += lazy[x];
		lazy[x<<1|1] += lazy[x];
		lazy[x] = 0;
	}
}

void update(int x, int lef, int rig, int L, int R) {
//	if(lef == rig) { arr[lef]++; return; }
	if(L<=lef && rig<=R) {
		lazy[x] ++;
		return;
	}
	push_down(x);
	int mid = (lef+rig) >> 1;
	if(L<=mid) update(x<<1, lef, mid, L, R);
	if(mid<R) update(x<<1|1, mid+1, rig, L, R);
}

void query(int x, int lef, int rig, int L, int R) {
	if(lef == rig) { arr[lef] = lazy[x]; return ; }
	push_down(x);
	int mid = (lef+rig) >> 1;
	if(L<=mid) query(x<<1, lef, mid, L, R);
	if(mid<R) query(x<<1|1, mid+1, rig, L, R);
}

int main(void) {
	freopen("test", "r", stdin);
	for( ; EOF!=scanf("%d", &n) && n; ) {
		init();
		int t = n, L, R;
		while(t--) {
			scanf("%d %d", &L, &R);
			update(1, 1, n, L, R);
			printf("udpate%d %d\n", L, R);
		}
		query(1, 1, n, 1, n);
		for(int i=0; i<n; i++) {
			if(i) printf(" ");
			printf("%d", arr[i+1]);
		}
		printf("\n");
	}
	return 0;
}
